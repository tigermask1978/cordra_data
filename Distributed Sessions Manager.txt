By default, Cordra handles HTTP sessions with an in-memory sessions manager. However, Cordra can be configured to use an alternate sessions manager. To configure this, add a sessions section to the Cordra config.json file.For example:If a property specifying whether the account is active is configured on the User digital object, you will be able to invalidate user sessions by deactivating the user account. See ¡°auth¡±: ¡°accountActive¡± for details on how to configure account activation.There are currently thr
ee session managers supported by Cordra, as defined below.All session managers take the following options:Option nameDescriptionmoduleThe name of the module to use. Default is ¡°memory¡±timeoutNumber of seconds before a session is expired. Default is 30 secondsmemoryIf no sessions module is configured in config.json, Cordra will use the system memory sessions manager. This sessions manager does not persist sessions over a reboot. Session information stored in memory will be lost if Cordra is restarted.These s
essions are not distributed, and so can only be used in a single instance deployment scenario.tomcatWith this configuration, Cordra will use the Tomcat¡¯s built-in facility for sessions. This is fine for a single-instance deployment, and can be used for a distributed deployment if Tomcat is configured for distributed sessions (see Session Replication for an example of this).This should not be used with a default Cordra single-instance installation, which uses Jetty instead of Tomcat.mongodbThe MongoDB sessio
ns manager will store sessions in an external MongoDB system. This module requires additional configuration under a property ¡°options¡±. Under ¡°options¡±, there must be a parameter called connectionUri, which is a standard MongoDB connection string. The ¡°options¡± can also include ¡°databaseName¡± (defaults to ¡°cordra¡±) and ¡°collectionName¡± (defaults to ¡°sessions¡±). (If Cordra¡¯s ¡°sessions¡± and ¡°storage¡± both use MongoDB, they should use distinct collections.)For example: