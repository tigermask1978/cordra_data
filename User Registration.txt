Cordra software enables only authenticated users, including the admin, to be able to create digital objects. Since users are also represented as digital objects, it may be necessary to allow new users to initiate the creation of their digital objects, while disallowing the creation of any other digital objects.This section describes how to build a user registration workflow within Cordra that enables new users to create their accounts in Cordra and subsequently activate their accounts. Instead of allowing a
ny unauthenticated user to create an account in one step, we will bind a user account in Cordra to the user¡¯s email address.In particular, when a request for the creation of a new account (i.e., user object) is received, Cordra generates a random string (called activation key) and sends an email to the requesting user¡¯s email address. Only that user will then be in possession of both the activation key and the information supplied with the creation request. Cordra verifies that that is the case and complete
s the user account creation.Specifically, the following features are considered for this user registration workflow:Allow new users to create an account along with their email address in Cordra by themselves. Only admins can create user accounts by default.Cordra to send emails with activation keys for users to confirm that they initiated the account creation.Allow users to activate their account without any admin intervention using the activation key sent to their email address. (This step implicitly also 
confirms that the users have access to emails corresponding to the registered email address).We will start this description with a default Cordra distribution and highlight all of the changes necessary to add the desired features. Specifically, we will need to:Modify the authorization for the User schema so that unauthenticated users can create User objects.Add Type Methods in JavaScript to the User schema for sending emails and confirming accounts.Add the necessary support files to the Cordra data director
y to enable sending emails through a Type method.You should download the default Cordra distribution here. Once you have downloaded the zip file, unzip it, and start Cordra as explained here. Once the startup process is complete, you should be be able to access the Cordra web interface at https://localhost:8443.For testing purposes, you can skip enabling the email support. If you do not set up email support, be sure your JavaScript method prints the activation key to the terminal console where the Cordra pr
ocess is launched, so that you can use it to activate the user account, for testing purposes. In production, however, email support should be enabled as described in Sending Emails.By default, unauthenticated users cannot create User objects in Cordra. To allow users to create their own accounts, log into the Cordra UI as the admin user, using the password you created on first startup. Choose the Authorization menu item from the Admin menu at the top of the page. You will be presented with a JSON representi
ng the current default access controls. Replace the existing JSON with the following:By performing the above steps, you have added a new ACL for the User type (lines 3-15). Previously, there was not a separate ACL for the type, and so it used the default ACL, which says that only authenticated users can create objects of this type. The new ACL says that anyone can create User objects, and any user can modify their own object. Also, we have added public permission to run the activateAccountIfKeyIsValid insta
nce method, which is described below.Because users can modify their own object, you will need to be careful about what is stored in that object. For example, it is probably ok if users can deactivate their account, but if user objects can include properties that only administrators can view or those that empower any user into an administrator status, then do not allow users access to such properties.You will have to modify the User type to add the functionality needed to support the registration process. Ty
pe methods will be used to generate and send the verification key, and confirm the key and activate the account.When a user creation request is received by Cordra, Cordra should flag the new account as inactive, generate an activation key for the account and store it securely, and email that key to the user. To configure Cordra to do that, you will need to modify the User schema to add the necessary fields for active status and the activation key. You should edit the schema and replace the existing JSON wit
h the following:By following the above steps, you have added the fields email, isActive, and activationKey, and made the email and isActive field required. Special flags are added using the cordra property to indicate that isActive and activationKey should be treated differently. The accountActive property (line 63) means that Cordra should use this field to indicate whether or not the user account is active. The secureProperty flag (line 71) means that this field will be hashed and salted before storage an
d will never be stored as plain text, so other existing users including the admin cannot view the key.Next, you will have to modify the beforeSchemaValidation method on the User object to generate and save the key, as well as email it to the user. You should replace the default User javascript with the following:A few things to note here:Email configuration for the email to be sent are hardcoded into the JavaScript lines (3-8).We are using context.isNew to make sure we only create an activation key on new o
bject creation (line 17).beforeSchemaValidation runs before the object is stored, so we can modify the key and active flag appropriately (lines 18-19).Key generation is using a pseudo-random function for the purposes of this tutorial (line 34). For actual use, you will want to use a more secure key generation method.Email validation in the JavaScript is purposefully minimal (lines 29-32). We will validate the address by sending an email to it.It is possible to access Java classes in the JavaScript. The send
Email function is using classes from the jar files we included earlier (lines 476-48).Email server config is loaded from local file in the loadServerConfig function (lines 72-76), so the secrets are never network accessible through Cordra. Note that we are also using Java here to read the file.Next, you should add a schema instance method for confirming a key by editing the User javascript and adding the following to the top:You should then add the following JavaScript function to the bottom:Again, a few th
ings to note:We are importing the built-in cordraUtil javascript module, which gives access to the verifySecret function used in the activateAccountIfKeyIsValid function. You can read more about the cordraUtil JavaScript module here.Any instance methods we create will only be available if added to the export.methods objects.Any changes made to the object in an instance method are automatically saved. Here, we are setting isActive to true and removing the activationKey.You should now be able sign up for a us
er account in Cordra, get an activation key, and use that key to activate the account. Here are some example curl commands for making the appropriate calls.Create a new user account:Activate the user account with the key:Note that the objectId in the activation URI is the id of the User object for this account, not the id of the User type object. If you are following along, you may need to modify the URI with the id of the User object in your local Cordra instance.By following the steps above, you have buil
t a system for allowing users to create and activate their own accounts. However, in some systems, an administrator creates the accounts for the user, and then the user activates the account and chooses their password. With a few changes to the code described above, you can support this alternative workflow.First, you will need to modify the Authorization config to restrict the ability to create User objects. You can do this by simply removing the public create ACL for the User type. When complete, your Use
r type ACL should look like this:Note that the aclCreate property is now an empty list. This means that only the admin user will be able to create new User objects.Next, you will have to modify beforeSchemaValidation to set a temporary password on the newly created user account. You can do that by changing the method to look like this:The only change above is that we are setting the password to a random string on line 11.Finally, the activateAccountIfKeyIsValid needs to set the new user¡¯s password if the ac
tivation key is valid. To do that you can modify the method to look like this:There are a few important changes made above. First, we are checking for the new password in the method context and doing a small amount of validation (lines 4-7). Object changes within a Type method do not go through validation, so be sure to do any validation you need in the method. Once the key is verified, you can set the new password on the object (line 14).With the above changes in place, you can now test the new account reg
istration workflow.Because only admin is allowed to create user objects, we must first authenticate to get an access token to use with our curl command. Use the password you created when starting your Cordra instance.:Admin creates a new user account:User activates their account with the key and a new password:Again, be sure to change the objectId in the URI to match the id of the User object being activated.Configurations and code that you will need to follow this description is included in the Cordra down
load, in the extensions/user-registration directory. This includes the full User type object and Cordra Authorization config. It also includes sample web application you can use to test out this functionality. To install the application, create a directory in your Cordra data directory called webapps and then copy the demo directory into the webapps directory. The demo will now be available at https://localhost:8443/demo.In this tutorial, we have explored a number of topics, including Cordra Type methods, a
ccess controls for objects and methods, and how to use third-party Java libraries in Type methods. This application is just an example, though. There a few additional things to think about while implementing a secure user registration in a live system. For example:Throttling email sending and account creation.Using CAPTCHAs, two-factor authentication, or other alternative account verification methods.Expiring activation keys after a certain time.These topics are important, but are considered out of scope.