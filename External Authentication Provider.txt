Cordra supports an authenticate JavaScript lifecycle hook that provides complete control how a request is authenticated. This section provides a complete example of one way in which this hook can be used to authenticate a JWT (Json Web Token) that have been supplied by a 3rd party authentication service. Below is an example of the decoded payload section of such a token:The below example authenticate hook implementation on the design object roughly follows these steps:Load the providers public key in JWK fo
rmat from the cordra data directory.Check if authInfo contains an correctly formatted token from the external provider.This is done by first checking if the token is a JWT.Then decoding the JWT and checking that the iss is who we expect it to be.If it is not an authentication attempt with a suitable token we return null.If we have an suitable token we verify it against the public key of the provider.Check the values of the claims stored in the token to make sure they are correct.Assuming those tests pass, r
eturn an object containing the userId, username, groupIds and the expiration from the token.