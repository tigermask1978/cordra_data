Digital objects in Cordra can be linked together in a verifiable way by combining digital object identifiers and digital object hashes. For details about hashing digital object, see Digital Object Hashing. Consider that we want to create a sequence of blocks (Block objects), each of which references one or more Book objects. Specifically, say, the following linked digital objects are desired:The following conceptual schema for a type called Block will be used to enable the above desire: Each block contains 
a property previousBlock that includes a reference to the previous block. Additionally each block contains the property pointers which is an array of references to other Cordra objects of any type from this block. In this context, a pointer or a reference is a JSON that includes an id and a hash, both pertaining to the digital object being pointed at.You can download the above types and sample digital objects used in this tutorial here. You can then load this information using the Cordra web interface. To d
o that, sign into Cordra as admin, select the Admin->Types dropdown menu, and click the ¡°Load from file¡± button. In the dialog that pops up, select the types file you downloaded and check the box to delete existing objects. Click ¡°Load¡± to import the types into Cordra. You can then view the digital objects in Cordra as they are discussed below.If you view the type digital object for the types Block and Book, you will see that the types have the hashObject property set to true. This means that the Cordra sof
tware will automatically generate hashes for the objects when they are created.Let us say the id and hash for each of the three Book objects are as follows:First, we create an initial block. Since this is the first block in the chain, the previousBlock pointer is omitted. Two objects are added to the pointers array, one for test/macbeth and one for test/hamlet.Observe in the JSON of the initial Block object below that it contains a hashes section in the metadata:To create a second Block, we set its previous
Block pointer to point at the initial block, including the full hash of the pointed at object in this object. We also add in a pointer to test/othello:The following type method on the Block type can be used to verify the chain to ensure that the pointed at objects have not been updated since the chain has been created.Invoking this type method will recursively verify the hashes for each pointer against the target object, following the pointers back to the previous block. Responding with true if all the hash
es verify. If at any point a particular hash cannot be verified, the method will throw an error with a message indicating which pointer has failed.Example Invocation: