WarningNote: the JS code in this example uses features which are not supported under Java 8. Please ensure you are using Java 11 if you wish to try this example.This example demonstrates how to configure Cordra to behave like a Registry of People. To showcase that such a registry could be used to manage transactions related to people, such as loans taken by them, we also show how loan digital objects could be managed and associated with person digital objects. This example is a basic starting point for a po
tential application.In addition to showing how to configure Cordra, we will demonstrate how to interact with Cordra using the DOIP Java SDK.This sample application supports the following narrative:Person digital objects are added to the registry by administrators. The registry can track various biographical information, as well as information related to official documents.When creating or updating a person digital object, the request should fail if it would create a duplicate Person object. Duplicates are f
lagged if either the government issued ids match, or the last name and the date of birth match.Loan digital objects can be added, including information about its payment status as well as borrowers.There are operations for getting a list of all households, getting a list of all living persons with expired fingerprints, and getting a list of all living persons with defaulted loans.Information is not publicly accessible. User accounts can be created and added to one of two groups: an admin group that has read
 and write access to all records, and a users group that has read-only access.If you would like to follow along without having to manually create the objects described below, you can be download a file containing sample objects here. Once downloaded, you can then load this information into Cordra using the Cordra UI. Sign in into Cordra as admin and select the Admin->Types dropdown menu. Click the ¡°Load from file¡± button. In the dialog that pops up, select the file you downloaded and check the box to delete
 existing objects. Click ¡°Load¡± to import the types into Cordra.These sample objects are for testing only. They include users ¡°admin1¡±, ¡°admin2¡±, ¡°user1¡±, and ¡°user2¡±, all with the default password of ¡°password¡±.We will need two groups for access controls. One of the groups will have read/write access to the objects, and the other group will only have read access.Edit the Cordra Authorization configuration in the Design Object, and replace the existing json with the following:Because the default read permis
sion is set to authenticated above, users will be required to log in before being able to read digital objects in the system. The default write and create permissions are set to the admin group, so non-admin users are limited to read-only access. Note that, if you are not using the sample data provided along with this tutorial, you will need to change test/c5a2dc3dcb24a8c9c790 to the id of the admin group you created.The schemas for the Person and Loan types of digital objects are show below. Notice that id
entifiers of digital objects are flagged to be auto-generated. The various timestamp attributes in the objects are also flagged to be auto-populated.Person Schema:Loan Schema:We will use the beforeSchemaValidation lifecycle hook to de-duplicate persons on create and update. Additionally, we will add two static type methods to the Person type for getting households and persons with expired fingerprints.Person Javascript:Note: The de-duplication function shown is best-effort using search and only checking a f
ew properties. A production system would need to be more thorough (to disallow any simultaneous create/update requests that might be potential duplicates), but this is sufficient for demonstration purposes.We also need to add a static type method to the Loan type, for getting a list of persons with defaulted loans.Loan Javascript:We will use the DOIP Java SDK to demonstrate how to use the system. Although not shown here, the Cordra UI or any other Cordra client library may be used to perform equivalent acti
ons.All identifiers shown are the randomly-generated identifiers included in the sample objects. If you have created your own objects instead of importing the sample ones, you will need to substitute these values with the appropriate identifiers in your local system.Before proceeding, be sure you have configured your Java project with doip-sdk jar file on the classpath. You can find instructions for doing so here.First, we must create a DOIP client Java instance, along with authentication and service inform
ation for the client to use.Change the authentication and service information as appropriate to your system. You may prefer to use a PKI based setup.Create a Person:Create a Loan:Retrieve:Update an object:Delete objects:Search:List Operations:Op.GetExpiredFingerPrints:Op.GetHouseholdMembers:Op.GetDefaulters:Binary files can be associated with Person or Loan objects using payloads. This can be used to attach files, such as, pictures or scans of certificates or government issued ids or load documents to a dig
ital object.For example, to add a payload to an existing Loan object:If you try to create a duplicate person, the beforeSchemaValidation lifecycle hook will block the change. For example, running this code (which duplicates one of the sample persons):Will produce this error:Trying to create objects as a user will also fail, due to the Authorization configuration. For example, this Loan creation attempt:Will produce this error:However, users can still read object and call read-only static methods. Unauthenti
cated users who try to read objects instead get a Unauthorized: 401 error.