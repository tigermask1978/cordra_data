A Cordra HTTP REST client library in Java for interacting with a Cordra service is included in the distribution. This library is specifically designed for use with the Cordra¡¯s REST API for interacting with Cordra.The client library can be included in your Gradle or Maven build files.Gradle:Maven:The client library and its dependencies can also be found in this directory in the downloaded package:The various methods supported by the Cordra Java client library are defined in this Java Interface:There are two
 implementations of that Java Interface, one that does not use access tokens and one that does:The basic approach to using Cordra would be to leverage any of the above implementations to perform create, retrieve, update, and delete (CRUD) operations and other operations. See the code in the aforementioned Java classes for details on the various supported operations.That said, the basic digital object Java class stated below should be used for adding, removing, or updating information prior to invoking any C
ordra client operations to commit the changes on the Cordra service:Create a new instance of CordraClient:Create a digital object of type Document (without attaching any payload, for brevity sake):Retrieve the digital object:Update the object:Delete the object:Search for objects:Invoke a Type method (instance method):Invoke a Type method (static method):The third argument of the various call methods can either be a JsonElement or an InputStream. If the AsResponse form is used, the return type allows access 
to response.headers.filename and response.headers.mediaType (if set by the type method) and well as response.body as an InputStream. The CallResponse object is Closeable.By default, instances of HttpCordraClient will connect to any server over HTTPS without authenticating the server. This behavior can be controlled by system properties as follows.System PropertyDescriptioncordra.client.tls.hostnameVerificationMust be set to true in order for CordraClient to verify the server hostname against the server cert
ificate; the default is no hostname verification.cordra.client.tls.useSystemDefaultUse the Java default behavior for trusting server certificates, including referring to javax.net.ssl.* system properties.cordra.client.tls.useDefaultUse the Java default behavior for trusting server certificates, but ignoring the javax.net.ssl.* system properties.cordra.client.tls.trustStoreFilesystem path to a keystore which defines which Cordra HTTPS certificates to trust.cordra.client.tls.trustStorePasswordPassword for the
 trustStore.