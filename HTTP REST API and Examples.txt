Cordra provides a RESTful HTTP API for interacting with digital objects. Cordra also provides a web browser based interface that dynamically creates object editors based on configured Schemas/Types, mainly for administrative purposes.Cordra HTTP requests that conform to HTTP/1.1 and HTTP/2 specifications (RFCs 7230, 7231, and 7540) are tested.Main APIsResourceDescriptionGET /objects/<id>Retrieves an object or part of an object by id.POST /objects/?type=<type>Create an object by type.PUT /objects/<id>Update 
an object by id.GET /searchSearch for objects (requires Cordra v2.1.0).POST /searchSearch for objects (requires Cordra v2.1.0).GET /objects/?query=<query>Search for objects.DELETE /objects/<id>Delete an object by id.DELETE /objects/<id>?payload=<payload>Delete a payload by id and name.GET http://hdl.handle.net/<id>Retrieves an object via the Handle proxy.GET /acls/<id>Retrieve the ACLs for a specific object.PUT /acls/<id>Modify the ACLs for a specific object.POST /users/this/passwordChange the password of t
he currently authenticated user.GET /check-credentialsRetrieve information about provided credentials.POST /callCall a Type method. (Some Type methods may allow the use of GET rather than POST.)GET /listMethodsList Type methods.POST /batchUploadBatch upload objects.Access Token APIsResourceDescriptionPOST /auth/tokenCreate a new access token.POST /auth/introspectRetrieve information about the specified access token.POST /auth/revokeDelete specified access token (used to ¡°sign out¡±).Administrative APIsResour
ceDescriptionGET /schemas/<type>Get schema or all schemas.PUT /schemas/<type>Create or update a schema.DELETE /schemas/<type>Delete a schema.POST /uploadObjectsBulk upload of objects from a json file.PUT /adminPasswordChange the password for the admin user.POST /updateHandlesUpdate all handle records for objects in Cordra.GET /updateHandlesGet status of handle update.POST /reindexBatchReindex all specified objects.GET /startupStatusAccessible even after failed startup to indicate success or failureExperimen
tal APIsResourceDescriptionGET /versions/?objectId=<objectId>Get version information for a specific object.POST /versions/?objectId=<objectId>Create a version of a specific object.HTTP Response CodeDescription200 OKThe request was successfully processed.400 Bad RequestThere was an error with the request, such as a creation or update which is not schema-valid.401 UnauthorizedActually ¡°Unauthenticated¡±. There is no authenticated user, or authentication failed, but the requested operation requires authenticati
on.403 ForbiddenThe authenticated user does not have permissions to perform the requested operation.404 Not FoundThe Cordra object or requested part does not exist.409 ConflictAn attempt was made to create a Cordra object with a handle already in use by a Cordra object.500 Internal Server ErrorAn unexpected server error occurred. Usually diagnosis requires looking at the server logs.Range requests for payloads can additionally return 206 Partial Content and 416 Range Not Satisfiable, following the standard 
specification for HTTP range requests.For any Cordra API call that requires authentication, you can either authenticate directly for the single call, or provide an access token. Access tokens are used to maintain a server session in between requests. This way, the server does not need to reprocess your authentication credentials with each request. Using sessions can significantly speed up the process of making multiple requests.There are two ways to authenticate directly. One is to include username (or, use
r object id) and password following the HTTP Basic Authentication method. Another is to authenticate using public-private key pair following the HTTP Bearer Authentication method with a JWT. For more information on the topic, see Authentication and Access Controls.To obtain an access token, you must authenticate using the Access Token API. Once authenticated, you will receive an access token that should be sent back with subsequent calls. This token should be sent using an Authorization Bearer header. For e
xample:The As-User header can be set to allow the admin user to perform operations on behalf of another user. If request comes with proper authentication for admin, and the As-User header is set, that userId will be considered to have authenticated instead.The Authenticate Hook hook can optionally be used to allow broader non-admin access to As-User functionality.All requests allow a query parameter called requestContext. This must be valid JSON object (suitably encoded as a query parameter). The requestCon
text is made available to JavaScript methods and lifecycle hooks as part of the context argument (see Lifecycle Hooks). It is also made available to the StorageChooser used with Multiple Storages.In the following examples the schema shown below was added to the server as type Document. Multiple types can be added. The server will only accept POST and PUT requests for objects that conform to the schema corresponding to the object type; other requests will receive a 400 Bad Request response.Example Schema:Req
uest:ParametersidrequiredThe id of the desired object.jsonPointeroptionalThe jsonPointer into the subcomponent of the target objectfilteroptionalA JSON array of jsonPointers used to restrict the result object.payloadoptionalThe name of the payload to retrieveprettyoptionalFormat returned jsontextoptionalWhen present on a request which would normally result in a JSON string, the response is the contents of the JSON stringdispositionoptionalFor payload requests. Can be used to set the Content-Disposition head
er on the response; ¡°disposition=attachment¡± will cause a standard web browser to perform a download operationfulloptionalIf present the response is the full Cordra object, including properties id, type, content, acl, metadata, and payloads. By default only the content is returned.Request headersRangeoptionalIf present in a payload request, only retrieve the requested bytes from the payload.Response headersX-SchemaType of the objectX-PermissionWhat the calling user is authorized to do with object. READ or W
RITE. Any caller with WRITE permission is also permitted to read the object.Request:Response:Request:Response:Request:Response:Request:Response:Request:ParameterstyperequiredThe type of the object being created. In this case ¡°Document¡±.dryRunoptionalDo not actually create the object. Will return results as if object had been created.suffixoptionalThe suffix of the handle used to identify this object. One will be generated if neither ¡®suffix¡¯ nor ¡®handle¡¯ is specified.handleoptionalThe handle used to identif
y this object. One will be generated if neither ¡®suffix¡¯ nor ¡®handle¡¯ is specified.fulloptionalIf present the response is the full Cordra object, including properties id, type, content, acl, metadata, and payloads. By default only the content is returned.See Handle Minting Configuration for configuring the handle prefix for automatic handle generation when the ¡°handle¡± parameter is not used.Request HeadersContent-Typeapplication/json OR multipart/form-dataResponse HeadersLocationURI for accessing the create
d object; includes the id of the created objectPOST Data:Response:To create an object with one or more payloads, POST data of type multipart/form-data must be sent. There must be one part named content which is the JSON content of the object to be created. There may optionally be a part named acl which will be the acl component of the new object; it must be a JSON object with two properties "readers" and "writers", each a JSON array of strings.Parts which have have filenames determine payloads. The payload 
name is the part name. The filename and a Content-Type if present are stored as the metadata of the payload.POST Data:Request:ParametersidrequiredThe id of the object to update.dryRunoptionalDo not actually update the object. Will return results as if object had been updated.typeoptionalIf specified, indicates a request to change the type of the object. Note that schemas and lifecycle methods will change with the type; in many cases deleting and recreating an object may be preferable.payloadToDeleteoptional
The name of an existing payload to delete. Can be used multiple times.jsonPointeroptionalA JSON pointer within the object¡¯s content. Only the JSON at that JSON pointer will be updated. Note that only the content can be modified, not the full object.fulloptionalIf present the response is the full Cordra object, including properties id, type, content, acl, metadata, and payloads. By default only the content is returned.Request HeadersContent-Typeapplication/json OR multipart/form-dataRequest:PUT Data:Response
:When updating an object with payloads, existing payloads can be omitted from the uploaded JSON data. Those payloads will be unchanged. New payloads and modified payloads should be included as parts in a multipart/form-data request, as for the object creation API. Additionally a payload can be deleted by including its names as the value of a payloadToDelete parameter. Multiple payloadToDelete parameters are allowed.Cordra v2.1.0 includes a separate /search API. For compatibility with earlier versions of Cor
dra, the GET /objects/?query=<query> API (with a query and no object ID) should be used.The /search API supports POST of a JSON body defining the search request. The /objects API only supports GET for searching, except POST with Content-Type: application/x-www-form-urlencoded can be used to avoid URI length limitations.Request:Parameters (or properties of application/json POST body)queryThe query to be processed. Either query or queryJson is required.queryJsonJSON which is used to generate a query for all o
bjects with content matching the supplied JSON. Either query or queryJson is required.idsoptionalIf specified, the search returns the ids of the matched objects only.pageNumoptional, default 0The desired results page number. 0 is the first page.pageSizeoptionalThe number of results per page. If omitted or negative no limit. If 0 no results are returned, only the size (number of hits).sortFieldsoptionalSort fields for the query results. A JSON array of objects with properties ¡°name¡±, a JSON pointer, and opti
onally ¡°reverse¡±, a boolean. (A legacy format is comma-separated, with each field name optionally followed by ASC or DESC to indicate the sort direction.)fulloptionalIf set to false only the content of the object is returned.filteroptionalA JSON array of jsonPointers used to restrict the result object. The jsonPointers are relative to the root of the objects in the results. Note that that root changes if the full param is set to false.filterQueriesoptionalA JSON array of JSON strings, each of which is inter
preted as a query string specifying additional constraints. Each item in filterQueries is conceptually added to the main query as with a boolean AND; however filterQueries do not affect document scoring, and in some cases may enhance backend performance by allowing caching.facetsoptionalA JSON array of JSON objects. Each facet object must include a property ¡°field¡±, value a string, which is an index field on which faceting is requested; see Faceted Search below.Request:Response:The same request can be sent 
as POST with Content-Type: application/json and this POST body:The query format is that used by the indexing backend, which is generally the inter-compatible Lucene/Solr/Elasticsearch format for fielded search. The fields include the payload name for payloads, and modified JSON Pointers for components of the object JSON content, where array indices are replaced with ¡°_¡± as a wildcard. Typical field names are ¡°/id¡±, ¡°/name¡±, ¡°/creator/organization¡±, ¡°/users/_/id¡±. The special field names ¡°id¡±, ¡°type¡±, ¡°aclRe
ad¡±, and ¡°aclWrite¡± can be used to search for objects by id, type, and acl. The special sort field name ¡°score¡± can be used to sort by score as determined by the indexing backend.Fields under Cordra object ¡°metadata¡± and ¡°userMetadata¡± are also indexed and searchable, using fields which are ¡°metadata¡± or ¡°userMetadata¡± prepended to the JSON pointer within the metadata or userMetadata object. Examples include ¡°metadata/createdOn¡±, ¡°metadata/createdBy¡±, ¡°metadata/modifiedOn¡±, ¡°metadata/modifiedBy¡±.See Query S
yntax for more details and examples for the search API.If the boolean parameters ¡°ids¡± is set, for example as GET /search?query=¡­&ids, then the ¡°results¡± will just be a list of ids rather than a list of Cordra objects.Note: Former versions of Cordra would return all results with pageSize=0. To restore this former behavior, you can add "useLegacySearchPageSizeZeroReturnsAll":true to the Cordra design object. By default a search with pageSize=0 returns the number of matched objects but no object content.Reque
st:Response:Here the filter param is used to restrict the properties in the result objects. This may be desirable if your stored objects are large and your application only requires a part of each object.The ¡°facets¡± parameter to the search API allows faceted search, where the search results are augmented with a list of possible values that the field can take and a count of how many objects have each value.The ¡°facets¡± request parameter is a list of facet specifications, each of which has a ¡°field¡± which is
 the index field (the JSON pointer) on which to perform faceting.The ¡°facets¡± property of search results is a list of facet results, each of which has the ¡°field¡± and a list of ¡°buckets¡±. Each ¡°bucket¡± has a ¡°value¡±, a ¡°count¡± and a ¡°filterQuery¡±. The ¡°filterQuery¡± can be added verbatim to the ¡°filterQueries¡± request parameter in order to restrict the search just to objects where the specified field has the specified value.Request:Response:Request:ParametersidrequiredThe id of the object to delete.jsonPoint
eroptionalIndicates that instead of deleting the object, the object should be modified by deleting the content at the specified JSON pointer.Request:Response: emptyRequest:ParametersidrequiredThe id of the object containing the payload.payloadrequiredThe name of the payload to delete.Request:Response: emptyRequest:Parameterslocattoptional, view:ui or view:json. (default view:ui)Used to specify if the redirect should respond with the json or the user interface.See Handle Integration for details about handle 
generation.Request:ParametersidrequiredThe id of the object to retrieve its acl.Request:Response:Request:ParametersidrequiredThe id of the object you want to set permissions on.Request:PUT Data:The PUT data contains two arrays, readers and writers. These arrays should contain the ids of the users that are given the associated permission. Note that if a user is granted write permission this implicitly grants them read permission.The standard PUT /objects update API can be used to modify ACL values as well, b
y including a part named ¡°acl¡± in a multipart request.NOTE: The ACL API has changed in Cordra 2.0. In version 1.0, the data arrays were called read and write.Response:Request:Request HeadersAuthorizationShould be a Basic auth header or Bearer auth header with a JWTChanging a password requires using the Authorization header directly authenticating the user, instead of an access token. The body of the request should just be the new password.Request:PUT Data:Response:Request:Request HeadersAuthorizationShould 
be a Basic or Bearer auth header. Optional.This call can be used to get information about the provided credentials. It can be used to check credentials for the given Authorization header, either for a direct authentication or for an access token. (It can also be used with the the Legacy Sessions API to check credentials of a cookie-based session.)Request:ParametersfulloptionalIf ?full=true is specified as a query parameter, additional fields are included in the response.Response Attribute NameDescriptionact
iveWhether or not the authentication was successful.usernameUsername of the authenticated useruserIdUserId of the authenticated usertypesPermittedToCreateList of types this user can create; included when ?full=true is specified.groupIdsList of groups this user is in; included when ?full=true is specified.See Type Methods for more details.Request:Some Type methods may allow the use of GET rather than POST.ParametersobjectIdoptionalThe id of the object on which to call an instance method. Either objectId or t
ype is required.typeoptionalThe type on which to call a static method.methodrequiredThe name of the method to call.The POST body is parsed as JSON and passed to the method as context.params. Alternately the method can use context.directIo to access potentially non-JSON input (see Direct I/O).If the method is accessed via GET (or POST with empty body) the input can be given by the URI query parameter ¡°params¡±.By default this API requires write permission on the object or schema. ACLs for calling methods can 
be configured as described in Authorization for Type Methods.Request:ParametersobjectIdoptionalThe id of the object you want to list methods of. Either objectId or type is required.typeoptionalA Cordra type; depending on the static parameter, this will list static methods on that type, or instance methods on objects of the type.staticoptionalIf present, listing methods for a type will list static methods instead of instance methods.The HTTP response is a list of strings which are the available method names.
Request:ParametersformatoptionalSet to ndjson to indicate that the format of the request body is newline-delimited JSON objects.failFastoptionalIf ?failFast=true is specified as a query parameter, the server will stop processing the input on the first encountered error.paralleloptionalIf ?parallel=false is specified as a query parameter, the server will process each object supplied in the input on a single thread in order.Request:POST Data:Response:The input may optionally include an id on each object, as s
hown in the first example. For each object in the request Cordra will first try to create that object. If the create operation fails because an object with that id already exists an update will be performed.By default the input objects will be processed in parallel in a multi-threaded fashion. As such they may not be processed in the order they are supplied in the input. If you need the input objects processed in order you can specify the optional query param parallel=false. It would then be the responsibil
ity of the caller to ensure any dependencies are correctly ordered. For example if you are creating an object of type Foo and the Schema Foo does not yet exist, include the Schema object in the request before any instances that use it.An alternative approach is to send multiple batch requests to the server. For example a first batch might include all the Schema objects and once complete, a second batch could contain all the instances of those types. Here each individual batch could safely be processed in pa
rallel.There are three supported request input formats:Newline-Delimited JSON:Cordra Search Results:Cordra Object JSON Array:By default the API expects either Cordra Object JSON Array or Cordra Search Results. You do not need to specify which as Cordra will detect between those two formats automatically. If you supply Newline-Delimited JSON you must include the ?format=ndjson query param with the request.Payload data may be included directly in the JSON as base64 encoded strings using the property name base
64Payload. For example:It is not necessary to include the base64Payload when updating an object. If base64Payload is missing on an update the stored payload will remain unchanged. However if you want to delete a payload during an update you can specify the payload names to be deleted in a top level property payloadsToDelete as shown below:WarningThe following API was introduced in Cordra v2.0.0. If you are using an earlier version, please refer to Legacy Sessions API for information on using cookie-based se
ssions with the HTTP REST API.The access token API can be used to authenticate only once to obtain an access token, which can then be provided for multiple calls. This way, the server does not need to reprocess your authentication credentials with each request, which can significantly speed up the process of making multiple requests.Once authenticated using the access token API, the access token should be sent to other APIs using an Authorization Bearer header. For example:Request:POST Data:orThe POST data 
specifies whether the user is authenticating via username/password or via keypair, depending on the grant_type. If the grant_type is password, the POST data should contain the username (or user object id) and password. See Authentication via Keys for the details of the JWT assertion that must be included with keypair authentication.Password authentication allows specifying either a username, or the Cordra object id of the user object. (If the two possible interpretations indicate two different Cordra object
s, the Cordra object id will be used.)ParametersfulloptionalIf ?full=true is specified as a query parameter, additional fields are included in the response.Response Attribute NameDescriptionaccess_tokenThe newly created access token.token_typeAlways ¡°Bearer¡±.activeWhether or not the token is active; always ¡°true¡± for successful calls of the /auth/token API.usernameUsername of the authenticated useruserIdUserId of the authenticated usertypesPermittedToCreateList of types this user can create; included when ?
full=true is specified.groupIdsList of groups this user is in; included when ?full=true is specified.Request:ParametersfulloptionalIf ?full=true is specified as a query parameter, additional fields are included in the response.Response Attribute NameDescriptionactiveWhether or not the token is active.usernameUsername of the authenticated useruserIdUserId of the authenticated usertypesPermittedToCreateList of types this user can create; included when ?full=true is specified.groupIdsList of groups this user i
s in; included when ?full=true is specified.Request HeadersAuthorizationBearer <token>Request:Response:ResourceDescriptionGET /schemas/<type>Get schema or all schemas.PUT /schemas/<type>Create or update a schema.DELETE /schemas/<type>Delete a schema.POST /uploadObjectsBulk upload of objects from a json file.PUT /adminPasswordChange the password for the admin user.POST /updateHandlesUpdate all handle records for objects in Cordra.GET /updateHandlesGet status of handle update.POST /reindexBatchReindex all spe
cified objects.GET /startupStatusAccessible even after failed startup to indicate success or failure.Request:Request:Response:Request:Request:Request Body:Response:Request:Request:Response:Request:ParametersdeleteCurrentObjectsbooleanIf true, delete all existing objects before uploading new objects. Otherwise, update objects. Default: falseRequest:Request Body:Response:Used to update the admin user password.Request:Request Body:Response:Used to update the admin user password.Request:Response:Request:Respons
e:Used to reindex the specified list of objects. Takes a JSON array of object ids to be reindexed. When using object locking, which is on by default, batch sizes should be small e.g. 16. However many reindex requests can be sent in parallel.Request:ParameterslockObjectsoptionalDefaults to ¡®true¡¯. Locks on object ids while objects are reindexed. You should only set this to ¡®false¡¯ if users are not using the system during reindexing, or it is otherwise possible to guarantee that the objects being reindexed wi
ll not be concurrently updated. If this is possible, performance is improved by setting this to false.Request Body:Response:This API provides some information even how far startup progressed even in the event of startup failure. This is useful in installations where remote access is easier than directly looking at log files; however, the amount of information provided is very limited. It will contain a ¡°state¡± which is either ¡°UP¡± or ¡°FAILED¡±, and a ¡°details¡± which will contain the status (¡°UP¡± or ¡°FAILED¡±)
 of some of the following, depending on your Cordra configuration:¡°storage¡±: Cordra¡¯s configured storage module¡°indexer¡±: Cordra¡¯s configured indexer module¡°zookeeper¡±: subsystem for accessing ZooKeeper (for a distributed Cordra)¡°replicationProducer¡±: subsystem for sending transactions to be replicated (using Kafka)¡°replicationConsumer¡±: subsystem for receiving transactions to be replicated (using Kafka)Request:Response:ResourceDescriptionGET /versions/?objectId=<objectId>Get version information for a speci
fic object.POST /versions/?objectId=<objectId>Create a version of a specific object.Request:ParametersobjectIdrequiredThe id of the object you want version information on.Request:Response:Request:ParametersobjectIdrequiredThe id of the object you want to create a version of.versionIdoptionalThe desired id of the new version. If omitted Cordra will mint an id.clonePayloadsoptionalIf present, the new version object will not contain a copy of the payloads.Request:Response: