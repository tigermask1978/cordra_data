By default, Cordra uses the local file system for storing digital objects. However, Cordra can be configured to use alternate storage backend systems. It is mandatory to use an alternate storage backend system when Cordra is deployed as a distributed system.There are a few storage technologies that Cordra can use for its storage. Cordra includes storage modules, which translate Cordra storage requirements into what each of the storage technologies natively offer.To configure a storage module, other than for
 the default file system based storage, add a storage section to the Cordra config.json file. For example:The following storage modules are included within the Cordra distribution:If no storage module is configured in config.json, the Cordra will store most information from digital objects in a local BerkeleyDB database and the payloads from those digital objects in a directory on the local filesystem. The identifiers of the payloads are hashed, and the hashes are used in the storage directory to ensure tha
t payloads are spread out evenly among the storage sub-directories.This storage module is only applicable for a single instance deployment scenario.In the unusual case of needing explicit configuration (for example, with Multiple Storages, described below), use:bdbjeModule Options:Option nameDescriptioncordraDataDirFilesystem path to the Cordra data directory; generally this will be automatically populated.memoryModule Options: noneThe memory storage module uses the system memory; as such the digital object
s will be erased once the Cordra process configured to use the memory module stops. Cordra configured with memory module is useful for testing purposes. There are no options required to be specified for this storage module.This storage module is only applicable for a single instance deployment scenario.The storage section of the config.json file looks like this:mongodbModule Options:Option nameDescriptionconnectionUriMongoDB-style connection URImaxTimeMs¡°maxTimeMs¡± value used for MongoDB operations, which g
ives a time limit for processing; default is 30 seconds. Generally this should not need to be set.maxTimeMsLongRunning¡°maxTimeMs¡± value used for long-running MongoDB operations used in reindexing; default is 10 days. Generally this should not need to be set.databaseNameDatabase name; defaults to ¡°cordra¡±collectionNameCollection name; defaults to ¡°cordra¡±gridFsBucketNameGridFS bucket name (for payload storage); defaults to ¡°fs¡±The MongoDB module will store objects in an MongoDB storage system. The connection
Uri is a standard MongoDB-style connection string. If no connectionUri is configured, the default URI of localhost:27017 will be used.When connecting to MongoDB using TLS, additional configuration may be required. See Enabling TLS for details.s3Module Options:Option nameDescriptionbucketName(required) Name of bucket to use for storage.region(required) AWS region for bucket. (e.g., us-west-2)accessKeyAWS access key for user with access to this bucketsecretKeyAWS secret key for user with access to this bucket
s3KeyPrefixPrefix to use for keys on S3 objects.endpointFor setting a non-standard service endpoint.signerOverrideSignature algorithm to be used by the client (possibly useful for non-standard service endpoints).If accessKey and secretKey are omitted, credentials will be picked up from the environment as described here.The S3 module stores Cordra objects in an Amazon S3 bucket. In order to use this module, you will need to create the bucket on AWS and create a user with full access to that bucket. An exampl
e is below:multiModule Options:Option nameDescriptionstorageChooser(required) Fully-qualified class name of an implementation of net.cnri.cordra.storage.multi.StorageChooser.storageChooserOptions(optional) A JSON object passed to the constructor of the StorageChooser.storageMap(required) A map from String names of storages to storage configurations (with ¡°module¡± and ¡°options¡± properties).This module allows multiplexing among several storage implementations. A custom implementation of net.cnri.cordra.storag
e.multi.StorageChooser can be provided to determine which storage is accessed for each call.This module can be used if different types of digital objects are to be managed in different storage systems.For a standard single-instance Cordra deployment, a JAR file containing the class can be placed in the lib subdirectory of the Cordra data directory, along with any dependency JARs (the cordra-core and Gson dependencies will be provided automatically). If Cordra is deployed in a separate servlet container, the
 JAR file should be deployed in the servlet container or in Cordra¡¯s own WEB-INF/lib directory.The StorageChooser can make use of a special feature of the REST API: any call can take a query parameter ¡°requestContext¡±, which encodes a JSON object. That user-supplied context is made available to the methods of the StorageChooser.customIt is possible to create a custom storage module which implements the Java interface. net.cnri.cordra.storage.CordraStorage. In addition to "module": "custom", there should be 
a sibling property of "module", "className", which should be set to the fully-qualified name of the Java class implementing CordraStorage.If the class has a constructor which takes a com.google.gson.JsonObject, the "options" from the configuration will be passed to that constructor to instantiate the class. If the "options" does not already have a property "cordraDataDir", that property will be populated with the filesystem path of the Cordra data directory. If there is no constructor taking a JsonObject, a
 default constructor (taking no arguments) will be called.For a standard single-instance Cordra deployment, a JAR file containing the class can be placed in the lib subdirectory of the Cordra data directory, along with any dependency JARs (the cordra-core and Gson dependencies will be provided automatically). If Cordra is deployed in a separate servlet container, the JAR file should be deployed in the servlet container or in Cordra¡¯s own WEB-INF/lib directory.